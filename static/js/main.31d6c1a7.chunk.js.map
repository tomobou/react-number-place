{"version":3,"sources":["index.js"],"names":["Square","className","onClick","this","props","value","React","Component","Board","row","startCol","renderBlock","blockSize","startRow","col","renderBlockRow","renderSquare","squares","renderBoardRow","calcPrediction","prediction","map","rowIndex","cell","colIndex","Number","candidates","Array","from","length","_","index","conditions","idx","forEach","element","i","j","createConditions","condition","definiteValues","filter","place","candidate","some","defValue","updateCandidatesForPlaceValue","result","checkedConditionType","createPredictionObj","checkPrediction","countGroupByPlace","reduce","countByPlace","get","undefined","push","set","Map","entries","pairList","checkUniqueCandidate","console","log","hasPrediction","type","NextPrediction","predictText","Save","Load","Clear","NumberSelector","parsed","parseInt","selectValue","classNames","fill","isNaN","toString","HistoryView","history","message","Game","state","x","getSetValueHistoryMessage","getPredictionTypeMessage","typeMessage","setState","slice","addHistory","getSetValueHistoryPrediction","localStorage","setItem","savedValues","getItem","split","clearHistory","handleClick","handleSelect","handleNextPrediction","handleSaveSquares","handleLoadSquares","handleClearSquares","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31d6c1a7.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n        return (\r\n            <button className=\"square\" onClick={this.props.onClick}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderBoardRow(row, startCol) {\r\n        const blockSize = 3\r\n        return (\r\n            <div className=\"board-row\">\r\n                {this.renderBlock(row, startCol)}\r\n                {this.renderBlock(row, startCol + blockSize * 1)}\r\n                {this.renderBlock(row, startCol + blockSize * 2)}\r\n            </div>\r\n        );\r\n    }\r\n    renderBlock(startRow, col) {\r\n        return (\r\n            <div className=\"board-block\">\r\n                {this.renderBlockRow(startRow, col)}\r\n                {this.renderBlockRow(startRow + 1, col)}\r\n                {this.renderBlockRow(startRow + 2, col)}\r\n            </div>\r\n        );\r\n    }\r\n    renderBlockRow(row, startCol) {\r\n        return (\r\n            <div className=\"block-row\">\r\n                {this.renderSquare(row, startCol)}\r\n                {this.renderSquare(row, startCol + 1)}\r\n                {this.renderSquare(row, startCol + 2)}\r\n            </div>\r\n        );\r\n    }\r\n    renderSquare(row, col) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[row][col]}\r\n                onClick={() => this.props.onClick(row, col)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-top\">\r\n                    {this.renderBoardRow(0, 0)}\r\n                    {this.renderBoardRow(3, 0)}\r\n                    {this.renderBoardRow(6, 0)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction calcPrediction(squares) {\r\n    let prediction = squares.map(function (row, rowIndex) {\r\n        return row.map(function (cell, colIndex) {\r\n            let value = (\"1\" <= cell && cell <= \"9\") ? Number(cell) : null;\r\n            let candidates = (\"1\" <= cell && cell <= \"9\") ? [] : Array.from({ length: 9 }, (_, index) => index + 1);\r\n            return {\r\n                value: value,\r\n                candidates: candidates,\r\n                rowIndex: rowIndex,\r\n                colIndex: colIndex\r\n            }\r\n        })\r\n    })\r\n    let conditions = createConditions(prediction)\r\n\r\n\r\n    updateCandidatesForPlaceValue(conditions)\r\n    let result = checkPrediction(prediction, \"UNIQUE_PLACE\")\r\n    if (result != null) {\r\n        return result\r\n    }\r\n\r\n    result = checkUniqueCandidate(conditions)\r\n    if (result != null) {\r\n        return result\r\n    }\r\n\r\n    console.log(prediction)\r\n    console.log(conditions)\r\n\r\n    return null\r\n}\r\n\r\n/**\r\n * 制約条件内の候補値を確認し、1箇所のみ候補に挙がっている値がある場合、該当箇所の候補として予測を返す。\r\n * @param {*} conditions \r\n * @returns \r\n */\r\nfunction checkUniqueCandidate(conditions) {\r\n    for (let condition of conditions) {\r\n        const countGroupByPlace = condition.reduce(function (countGroupByPlace, place, index) {\r\n            place.candidates.forEach(candidate => {\r\n                let countByPlace = countGroupByPlace.get(candidate)\r\n                if (countByPlace !== undefined) {\r\n                    countByPlace.push(index)\r\n                    countGroupByPlace.set(candidate, countByPlace)\r\n                } else {\r\n                    countGroupByPlace.set(candidate, [index])\r\n                }\r\n            });\r\n            return countGroupByPlace\r\n        }, new Map());\r\n        let result = null\r\n        for (let pairList of countGroupByPlace.entries()) {\r\n            if (pairList[1].length === 1) {\r\n                result = condition[pairList[1][0]]\r\n                result.candidate = [pairList[0]]\r\n                break;\r\n            }\r\n        }\r\n        if (result !== null) {\r\n            return createPredictionObj(true, \"UNIQUE_CANDIDATE\", result.rowIndex, result.colIndex, result.candidate[0])\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction checkPrediction(prediction, checkedConditionType) {\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            let candidates = prediction[i][j].candidates\r\n            if (prediction[i][j].candidates.length === 1) {\r\n                return createPredictionObj(true, checkedConditionType, i, j, candidates[0])\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\n/**\r\n * 予測のオブジェクトを作成する\r\n * @param {*} hasPrediction \r\n * @param {*} type \r\n * @param {*} row \r\n * @param {*} col \r\n * @param {*} value \r\n * @returns \r\n */\r\nfunction createPredictionObj(hasPrediction=false, type, row, col, value) {\r\n    if (hasPrediction) {\r\n        return {\r\n            type: type,\r\n            row: row,\r\n            col: col,\r\n            value: value\r\n        }\r\n    } \r\n    return null;\r\n}\r\n\r\n/**\r\n * 既に入っている値と制約条件の組み合わせをもとに各場所(place)に入れられる候補値(candidates)を導出する。\r\n * @param {*} conditions 制約条件\r\n */\r\nfunction updateCandidatesForPlaceValue(conditions) {\r\n    conditions.forEach(condition => {\r\n        let definiteValues = condition.filter(place => place.value !== null).map(place => place.value)\r\n        condition.forEach(place => {\r\n            place.candidates = place.candidates.filter((candidate) => !definiteValues.some((defValue) => candidate === defValue))\r\n        })\r\n    });\r\n}\r\n\r\nfunction createConditions(prediction) {\r\n    let conditions = Array(27)\r\n    let idx = 0\r\n    //row conditions\r\n    prediction.forEach(element => {\r\n        conditions[idx++] = element\r\n    });\r\n    //column conditions\r\n    for (let i = 0; i < 9; i++) {\r\n        conditions[idx++] = prediction.map(row => row[i])\r\n    }\r\n    // block conditions\r\n    for (let i = 0; i < 9; i = i + 3) {\r\n        for (let j = 0; j < 9; j = j + 3) {\r\n            conditions[idx++] = [\r\n                prediction[i][j],\r\n                prediction[i][j + 1],\r\n                prediction[i][j + 2],\r\n                prediction[i + 1][j],\r\n                prediction[i + 1][j + 1],\r\n                prediction[i + 1][j + 2],\r\n                prediction[i + 2][j],\r\n                prediction[i + 2][j + 1],\r\n                prediction[i + 2][j + 2],\r\n            ]\r\n        }\r\n    }\r\n    return conditions\r\n}\r\n\r\n\r\nfunction NextPrediction(props) {\r\n    return (\r\n        <div>\r\n            <button className=\"next-prediction\" onClick={props.onClick}>next</button>\r\n            <span className=\"next-prediction-text\">{props.predictText}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Save(props) {\r\n    return (\r\n        <button className=\"save\" onClick={props.onClick}>save</button>\r\n    )\r\n}\r\n\r\nfunction Load(props) {\r\n    return (\r\n        <button className=\"load\" onClick={props.onClick}>load</button>\r\n    )\r\n}\r\nfunction Clear(props) {\r\n    return (\r\n        <button className=\"clear\" onClick={props.onClick}>clear</button>\r\n    )\r\n}\r\n\r\n\r\nclass NumberSelector extends React.Component {\r\n    render() {\r\n        const parsed = parseInt(this.props.selectValue, 10);\r\n        let classNames = Array(10).fill(\"number-selector\");\r\n        if (isNaN(parsed) || parsed <= 0 || parsed >= 10) {\r\n            classNames[0] += \" selected\"\r\n        } else {\r\n            classNames[parsed] += \" selected\"\r\n        }\r\n        return (\r\n            <div className=\"number-selector-row\">\r\n                {classNames.map((className, index) => {\r\n                    let value = (index === 0) ? \" \" : index.toString()\r\n                    return (\r\n                        <button key={\"number-selector-\" + index} className={className} onClick={() => this.props.onClick(value)}>{value}</button>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass HistoryView extends React.Component {\r\n    render() {\r\n        let history = this.props.history.map(message => (\r\n            <div>{message}</div>\r\n        ))\r\n        return (\r\n            <div className=\"history-view\">\r\n                {history}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null).map(x => Array(9).fill(null)),\r\n            selectValue: \" \",\r\n            predictText: \"\",\r\n            history: []\r\n        };\r\n    }\r\n    getPredictionTypeMessage(type) {\r\n        switch (type) {\r\n            case \"UNIQUE_PLACE\": return \"値確定\";\r\n            case \"UNIQUE_CANDIDATE\": return \"条件確定\";\r\n            default: return type;\r\n        }\r\n    }\r\n    getSetValueHistoryPrediction(prediction) {\r\n        return this.getSetValueHistoryMessage(prediction.row, prediction.col, prediction.value, this.getPredictionTypeMessage(prediction.type))\r\n    }\r\n    getSetValueHistoryMessage(row, col, value, typeMessage) {\r\n        return \"[↓\" + (row + 1) + \"][→\" + (col + 1) + \"]＝\" + value + \"(\" + typeMessage + \")\";\r\n    }\r\n    clearHistory(message = null) {\r\n        let history = [];\r\n        if (message !== null) {\r\n            history.push(message)\r\n        }\r\n        this.setState(state => ({\r\n            history: history\r\n        }));\r\n    }\r\n    addHistory(message) {\r\n        let history = this.state.history;\r\n        history.push(message)\r\n        this.setState(state => ({\r\n            history: history\r\n        }));\r\n    }\r\n    handleClick(row, col) {\r\n        let squares = this.state.squares.slice();\r\n        squares[row][col] = this.state.selectValue;\r\n        this.setState(state => ({\r\n            squares: squares\r\n        }));\r\n        this.addHistory(this.getSetValueHistoryMessage(row, col, this.state.selectValue, \"ユーザー\"))\r\n    }\r\n    handleSelect(value) {\r\n        this.setState(state => ({\r\n            selectValue: value\r\n        }));\r\n    }\r\n    handleNextPrediction() {\r\n        let prediction = calcPrediction(this.state.squares)\r\n        if (prediction != null) {\r\n            let squares = this.state.squares;\r\n            let predictText = \"[\" + (prediction.row + 1) + \"]行[\" + (prediction.col + 1) + \"]列目は\" + prediction.value + \"です。\"\r\n            squares[prediction.row][prediction.col] = prediction.value.toString()\r\n            this.setState(state => ({\r\n                squares: squares,\r\n                predictText: predictText\r\n            }));\r\n            this.addHistory(this.getSetValueHistoryPrediction(prediction))\r\n        } else {\r\n            this.setState(state => ({\r\n                predictText: \"次の候補は見つかりませんでした\"\r\n            }));\r\n        }\r\n    }\r\n    handleSaveSquares() {\r\n        console.log(this.state.squares)\r\n        localStorage.setItem('squares', this.state.squares)\r\n    }\r\n    handleLoadSquares() {\r\n        const savedValues = localStorage.getItem('squares').split(\",\")\r\n        const squares = Array(9).fill(null).map(function (_, index) { return savedValues.slice(index * 9, (index + 1) * 9) })\r\n        this.setState(state => ({\r\n            squares: squares\r\n        }));\r\n        this.clearHistory(\"ロードしました\")\r\n    }\r\n    handleClearSquares() {\r\n        this.setState(state => ({\r\n            squares: Array(9).fill(null).map(x => Array(9).fill(null))\r\n        }));\r\n        this.clearHistory()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <Board\r\n                    squares={this.state.squares}\r\n                    onClick={(row, col) => this.handleClick(row, col)}\r\n                />\r\n                <NumberSelector selectValue={this.state.selectValue} onClick={(value) => this.handleSelect(value)} />\r\n                <NextPrediction predictText={this.state.predictText} onClick={() => this.handleNextPrediction()}></NextPrediction>\r\n                <div className=\"button-row\">\r\n                    <Save onClick={() => this.handleSaveSquares()}></Save>\r\n                    <Load onClick={() => this.handleLoadSquares()}></Load>\r\n                    <Clear onClick={() => this.handleClearSquares()}></Clear>\r\n                </div>\r\n                <HistoryView history={this.state.history}></HistoryView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}