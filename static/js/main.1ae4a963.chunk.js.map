{"version":3,"sources":["index.tsx"],"names":["Square","className","onClick","this","props","value","React","Component","Board","row","startCol","renderBlock","blockSize","startRow","col","renderBlockRow","renderSquare","squares","renderBoardRow","calcPrediction","places","map","rowIndex","cell","colIndex","Number","candidates","Array","from","length","_","index","conditions","idx","forEach","place","i","j","createConditions","condition","definiteValues","filter","candidate","some","defValue","updateCandidatesForPlaceValue","result","prediction","checkedConditionType","createPredictionObj","checkPrediction","countGroupByPlace","Map","get","set","entries","pairList","key","checkUniqueCandidate","console","log","type","NextPrediction","predictText","Save","Load","Clear","NumberSelector","parsed","parseInt","selectValue","classNames","fill","isNaN","toString","HistoryView","history","message","Game","state","x","getSetValueHistoryMessage","getPredictionTypeMessage","typeMessage","push","setState","slice","addHistory","getSetValueHistoryPrediction","localStorage","setItem","join","savedValues","getItem","split","clearHistory","handleClick","handleSelect","handleNextPrediction","handleSaveSquares","handleLoadSquares","handleClearSquares","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1ae4a963.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\ninterface SquareProps{\r\n    onClick: () => void,\r\n    value: string\r\n}\r\n\r\nclass Square extends React.Component<SquareProps> {\r\n    render() {\r\n        return (\r\n            <button className=\"square\" onClick={this.props.onClick}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\ninterface BoardProps{\r\n    onClick: (row:number,col:number) => void,\r\n    squares: Array<Array<string>>\r\n}\r\n\r\nclass Board extends React.Component<BoardProps> {\r\n    renderBoardRow(row:number, startCol:number) {\r\n        const blockSize = 3\r\n        return (\r\n            <div className=\"board-row\">\r\n                {this.renderBlock(row, startCol)}\r\n                {this.renderBlock(row, startCol + blockSize * 1)}\r\n                {this.renderBlock(row, startCol + blockSize * 2)}\r\n            </div>\r\n        );\r\n    }\r\n    renderBlock(startRow:number, col:number) {\r\n        return (\r\n            <div className=\"board-block\">\r\n                {this.renderBlockRow(startRow, col)}\r\n                {this.renderBlockRow(startRow + 1, col)}\r\n                {this.renderBlockRow(startRow + 2, col)}\r\n            </div>\r\n        );\r\n    }\r\n    renderBlockRow(row:number, startCol:number) {\r\n        return (\r\n            <div className=\"block-row\">\r\n                {this.renderSquare(row, startCol)}\r\n                {this.renderSquare(row, startCol + 1)}\r\n                {this.renderSquare(row, startCol + 2)}\r\n            </div>\r\n        );\r\n    }\r\n    renderSquare(row:number, col:number) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[row][col]}\r\n                onClick={() => this.props.onClick(row, col)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-top\">\r\n                    {this.renderBoardRow(0, 0)}\r\n                    {this.renderBoardRow(3, 0)}\r\n                    {this.renderBoardRow(6, 0)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface Place {\r\n    value: number | null,\r\n    candidates: Array<number>,\r\n    rowIndex: number,\r\n    colIndex: number\r\n}\r\n\r\n\r\nfunction calcPrediction(squares:Array<Array<string>>) {\r\n    let places = squares.map(function (row, rowIndex) {\r\n        return row.map(function (cell, colIndex):Place {\r\n            let value = (\"1\" <= cell && cell <= \"9\") ? Number(cell) : null;\r\n            let candidates = (\"1\" <= cell && cell <= \"9\") ? [] : Array.from({ length: 9 }, (_, index) => index + 1);\r\n            return {\r\n                value: value,\r\n                candidates: candidates,\r\n                rowIndex: rowIndex,\r\n                colIndex: colIndex\r\n            }\r\n        })\r\n    })\r\n    let conditions = createConditions(places)\r\n\r\n\r\n    updateCandidatesForPlaceValue(conditions)\r\n    let result = checkPrediction(places, \"UNIQUE_PLACE\")\r\n    if (result != null) {\r\n        return result\r\n    }\r\n\r\n    result = checkUniqueCandidate(conditions)\r\n    if (result != null) {\r\n        return result\r\n    }\r\n\r\n    console.log(places)\r\n    console.log(conditions)\r\n\r\n    return null\r\n}\r\n\r\n/**\r\n * 制約条件内の候補値を確認し、1箇所のみ候補に挙がっている値がある場合、該当箇所の候補として予測を返す。\r\n * @param {*} conditions \r\n * @returns \r\n */\r\nfunction checkUniqueCandidate(conditions:Array<Place[]>) {\r\n    for (let condition of conditions) {\r\n        let countGroupByPlace = new Map<number,number>()\r\n        condition.forEach(function (place, index) {\r\n            place.candidates.forEach(candidate => {\r\n                let countByPlace = countGroupByPlace.get(candidate)\r\n                if (countByPlace != null) {\r\n                    countGroupByPlace.set(candidate, -1)\r\n                } else {\r\n                    countGroupByPlace.set(candidate, index)\r\n                }\r\n            });\r\n            return countGroupByPlace\r\n        });\r\n        for (let pairList of [...countGroupByPlace.entries()]) {\r\n            const key = pairList[0]\r\n            const value = pairList[1]\r\n            if(value != null){\r\n                if (value !== -1) {\r\n                    let result = condition[value];\r\n                    result.candidates = [key];\r\n                    return createPredictionObj(\"UNIQUE_CANDIDATE\", result.rowIndex, result.colIndex, result.candidates[0])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction checkPrediction(prediction:Place[][], checkedConditionType:string):Prediction|null {\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            let candidates = prediction[i][j].candidates\r\n            if (prediction[i][j].candidates.length === 1) {\r\n                return createPredictionObj(checkedConditionType, i, j, candidates[0])\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\ninterface Prediction {\r\n    type: string,\r\n    row: number,\r\n    col: number,\r\n    value: number\r\n};\r\n\r\n/**\r\n * 予測のオブジェクトを作成する\r\n * @param {*} type \r\n * @param {*} row \r\n * @param {*} col \r\n * @param {*} value \r\n * @returns \r\n */\r\nfunction createPredictionObj(type:string, row:number, col:number, value:number):Prediction {\r\n    return {\r\n        type: type,\r\n        row: row,\r\n        col: col,\r\n        value: value\r\n    }\r\n}\r\n\r\n/**\r\n * 既に入っている値と制約条件の組み合わせをもとに各場所(place)に入れられる候補値(candidates)を導出する。\r\n * @param {*} conditions 制約条件\r\n */\r\nfunction updateCandidatesForPlaceValue(conditions:Array<Place[]>) {\r\n    conditions.forEach(condition => {\r\n        let definiteValues = condition.filter(place => place.value !== null).map(place => place.value)\r\n        condition.forEach(place => {\r\n            place.candidates = place.candidates.filter((candidate) => !definiteValues.some((defValue) => candidate === defValue))\r\n        })\r\n    });\r\n}\r\n\r\nfunction createConditions(places:Place[][]):Array<Place[]> {\r\n    let conditions = Array<Place[]>(27)\r\n    let idx = 0\r\n    //row conditions\r\n    places.forEach(place => {\r\n        conditions[idx++] = place\r\n    });\r\n    //column conditions\r\n    for (let i = 0; i < 9; i++) {\r\n        conditions[idx++] = places.map(row => row[i])\r\n    }\r\n    // block conditions\r\n    for (let i = 0; i < 9; i = i + 3) {\r\n        for (let j = 0; j < 9; j = j + 3) {\r\n            conditions[idx++] = [\r\n                places[i][j],\r\n                places[i][j + 1],\r\n                places[i][j + 2],\r\n                places[i + 1][j],\r\n                places[i + 1][j + 1],\r\n                places[i + 1][j + 2],\r\n                places[i + 2][j],\r\n                places[i + 2][j + 1],\r\n                places[i + 2][j + 2],\r\n            ]\r\n        }\r\n    }\r\n    return conditions\r\n}\r\n\r\ninterface NextPredictionProps{\r\n    onClick: () => void,\r\n    predictText: string\r\n}\r\n\r\nfunction NextPrediction(props:NextPredictionProps) {\r\n    return (\r\n        <div>\r\n            <button className=\"next-prediction\" onClick={props.onClick}>next</button>\r\n            <span className=\"next-prediction-text\">{props.predictText}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface ClickActionProps{\r\n    onClick: () => void\r\n}\r\n\r\nfunction Save(props:ClickActionProps) {\r\n    return (\r\n        <button className=\"save\" onClick={props.onClick}>save</button>\r\n    )\r\n}\r\n\r\nfunction Load(props:ClickActionProps) {\r\n    return (\r\n        <button className=\"load\" onClick={props.onClick}>load</button>\r\n    )\r\n}\r\nfunction Clear(props:ClickActionProps) {\r\n    return (\r\n        <button className=\"clear\" onClick={props.onClick}>clear</button>\r\n    )\r\n}\r\n\r\ninterface NumberSelectorProps {\r\n    selectValue: string,\r\n    onClick: (value:string) => void\r\n}\r\n\r\nclass NumberSelector extends React.Component<NumberSelectorProps> {\r\n    render() {\r\n        const parsed = parseInt(this.props.selectValue, 10);\r\n        let classNames = Array(10).fill(\"number-selector\");\r\n        if (isNaN(parsed) || parsed <= 0 || parsed >= 10) {\r\n            classNames[0] += \" selected\"\r\n        } else {\r\n            classNames[parsed] += \" selected\"\r\n        }\r\n        return (\r\n            <div className=\"number-selector-row\">\r\n                {classNames.map((className, index) => {\r\n                    let value = (index === 0) ? \" \" : index.toString()\r\n                    return (\r\n                        <button key={\"number-selector-\" + index} className={className} onClick={() => this.props.onClick(value)}>{value}</button>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface HistoryViewProps {\r\n    history: string[]\r\n}\r\n\r\nclass HistoryView extends React.Component<HistoryViewProps> {\r\n    render() {\r\n        let history = this.props.history.map(message => (\r\n            <div>{message}</div>\r\n        ))\r\n        return (\r\n            <div className=\"history-view\">\r\n                {history}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface GameProps {\r\n\r\n}\r\ninterface GameStates{\r\n    squares: Array<Array<string>>,\r\n    selectValue: string,\r\n    predictText: string,\r\n    history: string[]\r\n}\r\n\r\n\r\nclass Game extends React.Component<GameProps,GameStates> {\r\n    constructor(props: GameProps | Readonly<GameProps>) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null).map(x => Array(9).fill(null)),\r\n            selectValue: \" \",\r\n            predictText: \"\",\r\n            history: []\r\n        };\r\n    }\r\n    getPredictionTypeMessage(type:string) {\r\n        switch (type) {\r\n            case \"UNIQUE_PLACE\": return \"値確定\";\r\n            case \"UNIQUE_CANDIDATE\": return \"条件確定\";\r\n            default: return type;\r\n        }\r\n    }\r\n    getSetValueHistoryPrediction(prediction:Prediction) {\r\n        return this.getSetValueHistoryMessage(prediction.row, prediction.col, prediction.value.toString(), this.getPredictionTypeMessage(prediction.type))\r\n    }\r\n    getSetValueHistoryMessage(row:number, col:number, value:string, typeMessage:string) {\r\n        return \"[↓\" + (row + 1) + \"][→\" + (col + 1) + \"]＝\" + value + \"(\" + typeMessage + \")\";\r\n    }\r\n    clearHistory(message:string = \"\" ) {\r\n        let history:string[] = [];\r\n        if (message !== \"\") {\r\n            history.push(message)\r\n        }\r\n        this.setState(state => ({\r\n            history: history\r\n        }));\r\n    }\r\n    addHistory(message:string) {\r\n        let history = this.state.history;\r\n        history.push(message)\r\n        this.setState(state => ({\r\n            history: history\r\n        }));\r\n    }\r\n    handleClick(row:number, col:number) {\r\n        let squares = this.state.squares.slice();\r\n        squares[row][col] = this.state.selectValue;\r\n        this.setState(state => ({\r\n            squares: squares\r\n        }));\r\n        this.addHistory(this.getSetValueHistoryMessage(row, col, this.state.selectValue, \"ユーザー\"))\r\n    }\r\n    handleSelect(value:string) {\r\n        this.setState(state => ({\r\n            selectValue: value\r\n        }));\r\n    }\r\n    handleNextPrediction() {\r\n        let prediction = calcPrediction(this.state.squares)\r\n        if (prediction != null) {\r\n            let squares = this.state.squares;\r\n            let predictText = \"[\" + (prediction.row + 1) + \"]行[\" + (prediction.col + 1) + \"]列目は\" + prediction.value + \"です。\"\r\n            squares[prediction.row][prediction.col] = prediction.value.toString()\r\n            this.setState(state => ({\r\n                squares: squares,\r\n                predictText: predictText\r\n            }));\r\n            this.addHistory(this.getSetValueHistoryPrediction(prediction))\r\n        } else {\r\n            this.setState(state => ({\r\n                predictText: \"次の候補は見つかりませんでした\"\r\n            }));\r\n        }\r\n    }\r\n    handleSaveSquares() {\r\n        console.log(this.state.squares)\r\n        localStorage.setItem('squares', this.state.squares.map(row => row.join(\",\")).join(\",\"))\r\n    }\r\n    handleLoadSquares() {\r\n        const savedValues = localStorage.getItem('squares')?.split(\",\")\r\n        if(savedValues != null){\r\n            const squares = Array(9).fill(null).map(function (_, index) { return savedValues.slice(index * 9, (index + 1) * 9) })\r\n            this.setState(state => ({\r\n                squares: squares\r\n            }));\r\n            this.clearHistory(\"ロードしました\")\r\n        }\r\n    }\r\n    handleClearSquares() {\r\n        this.setState(state => ({\r\n            squares: Array(9).fill(null).map(x => Array(9).fill(null))\r\n        }));\r\n        this.clearHistory()\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <Board\r\n                    squares={this.state.squares}\r\n                    onClick={(row, col) => this.handleClick(row, col)}\r\n                />\r\n                <NumberSelector selectValue={this.state.selectValue} onClick={(value) => this.handleSelect(value)} />\r\n                <NextPrediction predictText={this.state.predictText} onClick={() => this.handleNextPrediction()}></NextPrediction>\r\n                <div className=\"button-row\">\r\n                    <Save onClick={() => this.handleSaveSquares()}></Save>\r\n                    <Load onClick={() => this.handleLoadSquares()}></Load>\r\n                    <Clear onClick={() => this.handleClearSquares()}></Clear>\r\n                </div>\r\n                <HistoryView history={this.state.history}></HistoryView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}