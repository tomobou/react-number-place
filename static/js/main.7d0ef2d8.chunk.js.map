{"version":3,"sources":["index.js"],"names":["Square","className","onClick","this","props","value","React","Component","Board","row","startCol","renderBlock","blockSize","startRow","col","renderBlockRow","renderSquare","squares","renderBoardRow","calcCandidates","prediction","map","rowIndex","cell","colIndex","Number","candidates","Array","from","length","_","index","conditions","idx","forEach","element","i","j","createConditions","condition","definiteValues","filter","place","candidate","some","defValue","updateCandidatesForPlaceValue","result","checkedConditionType","createPredictionObj","createNoPredictionObj","checkPrediction","hasPrediction","countGroupByPlace","reduce","countByPlace","get","undefined","push","set","Map","console","log","entries","pairList","checkUniqueCandidate","type","NextCandidate","predictText","Save","Load","Clear","NumberSelector","parsed","parseInt","selectValue","classNames","fill","isNaN","toString","HistoryView","history","message","Game","state","x","getSetValueHistoryMessage","getPredictionTypeMessage","typeMessage","setState","slice","addHistory","getSetValueHistoryPrediction","localStorage","setItem","savedValues","getItem","split","clearHistory","handleClick","handleSelect","handleNextCandidate","handleSaveSquares","handleLoadSquares","handleClearSquares","ReactDOM","render","document","getElementById"],"mappings":"oNAIMA,E,4JACF,WACI,OACI,wBAAQC,UAAU,SAASC,QAASC,KAAKC,MAAMF,QAA/C,SACKC,KAAKC,MAAMC,Y,GAJPC,IAAMC,WAUrBC,E,oKACF,SAAeC,EAAIC,GAEf,OACI,sBAAKT,UAAU,YAAf,UACKE,KAAKQ,YAAYF,EAAIC,GACrBP,KAAKQ,YAAYF,EAAIC,EAASE,GAC9BT,KAAKQ,YAAYF,EAAIC,EAASE,Q,yBAI3C,SAAYC,EAASC,GACjB,OACI,sBAAKb,UAAU,cAAf,UACKE,KAAKY,eAAeF,EAASC,GAC7BX,KAAKY,eAAeF,EAAS,EAAEC,GAC/BX,KAAKY,eAAeF,EAAS,EAAEC,Q,4BAI5C,SAAeL,EAAIC,GACf,OACI,sBAAKT,UAAU,YAAf,UACKE,KAAKa,aAAaP,EAAIC,GACtBP,KAAKa,aAAaP,EAAIC,EAAS,GAC/BP,KAAKa,aAAaP,EAAIC,EAAS,Q,0BAI5C,SAAaD,EAAIK,GAAM,IAAD,OAClB,OACI,cAACd,EAAD,CACIK,MAAOF,KAAKC,MAAMa,QAAQR,GAAKK,GAC/BZ,QAAS,kBAAM,EAAKE,MAAMF,QAAQO,EAAIK,Q,oBAKlD,WACI,OACI,8BACI,sBAAKb,UAAU,YAAf,UACKE,KAAKe,eAAe,EAAE,GACtBf,KAAKe,eAAe,EAAE,GACtBf,KAAKe,eAAe,EAAE,Y,GA5CvBZ,IAAMC,WAoD1B,SAASY,EAAeF,GACpB,IAAIG,EAAaH,EAAQI,KAAI,SAASZ,EAAKa,GACvC,OAAOb,EAAIY,KAAI,SAASE,EAAMC,GAG1B,MAAO,CACHnB,MAHS,KAAKkB,GAAMA,GAAM,IAAME,OAAOF,GAAQ,KAI/CG,WAHc,KAAKH,GAAMA,GAAM,IAAM,GAAKI,MAAMC,KAAK,CAACC,OAAQ,IAAI,SAACC,EAAGC,GAAJ,OAAcA,EAAM,KAItFT,SAAUA,EACVE,SAAUA,SAIlBQ,EA+FR,SAA0BZ,GACtB,IAAIY,EAAaL,MAAM,IACnBM,EAAM,EAEVb,EAAWc,SAAQ,SAAAC,GACfH,EAAWC,KAASE,KAGxB,IARiC,eAQzBC,GACJJ,EAAWC,KAASb,EAAWC,KAAI,SAAAZ,GAAG,OAAIA,EAAI2B,OAD1CA,EAAI,EAAGA,EAAI,EAAGA,IAAK,EAAnBA,GAIR,IAAI,IAAIA,EAAI,EAAGA,EAAI,EAAGA,GAAI,EACtB,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,GAAI,EACtBL,EAAWC,KAAS,CAChBb,EAAWgB,GAAGC,GACdjB,EAAWgB,GAAGC,EAAE,GAChBjB,EAAWgB,GAAGC,EAAE,GAChBjB,EAAWgB,EAAE,GAAGC,GAChBjB,EAAWgB,EAAE,GAAGC,EAAE,GAClBjB,EAAWgB,EAAE,GAAGC,EAAE,GAClBjB,EAAWgB,EAAE,GAAGC,GAChBjB,EAAWgB,EAAE,GAAGC,EAAE,GAClBjB,EAAWgB,EAAE,GAAGC,EAAE,IAI9B,OAAOL,EA1HUM,CAAiBlB,IAsFtC,SAAuCY,GACnCA,EAAWE,SAAQ,SAAAK,GACf,IAAIC,EAAiBD,EAAUE,QAAO,SAAAC,GAAK,OAAoB,OAAhBA,EAAMrC,SAAgBgB,KAAI,SAAAqB,GAAK,OAAIA,EAAMrC,SACxFkC,EAAUL,SAAQ,SAAAQ,GACdA,EAAMhB,WAAagB,EAAMhB,WAAWe,QAAO,SAACE,GAAD,OAAgBH,EAAeI,MAAK,SAACC,GAAD,OAAcF,IAAcE,cAvFnHC,CAA8Bd,GAC9B,IAAIe,EAmDR,SAAyB3B,EAAY4B,GACjC,IAAI,IAAIZ,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,IAAIX,EAAaN,EAAWgB,GAAGC,GAAGX,WAClC,GAA0C,IAAvCN,EAAWgB,GAAGC,GAAGX,WAAWG,OAC3B,OAAOoB,GAAoB,EAAKD,EAAqBZ,EAAEC,EAAEX,EAAW,IAIhF,OAAOwB,IA5DMC,CAAgB/B,EAAY,gBACzC,OAAG2B,EAAOK,cACCL,GAGXA,EAeJ,SAA8Bf,GAAY,IAAD,gBAChBA,GADgB,IACrC,IAAI,EAAJ,qBAAiC,CAAC,IAA1BO,EAAyB,QACvBc,EAAoBd,EAAUe,QAAO,SAAUD,EAAmBX,EAAOX,GAU3E,OATAW,EAAMhB,WAAWQ,SAAQ,SAAAS,GACrB,IAAIY,EAAeF,EAAkBG,IAAIb,QACrBc,IAAjBF,GACCA,EAAaG,KAAK3B,GAClBsB,EAAkBM,IAAIhB,EAAWY,IAEjCF,EAAkBM,IAAIhB,EAAW,CAAEZ,OAGpCsB,IACR,IAAIO,KACPC,QAAQC,IAAIT,GACZ,IAd6B,EAczBN,EAAS,KAdgB,cAeTM,EAAkBU,WAfT,IAe7B,IAAI,EAAJ,qBAAgD,CAAC,IAAzCC,EAAwC,QAC5C,GAA0B,IAAvBA,EAAS,GAAGnC,OAAa,EACxBkB,EAASR,EAAUyB,EAAS,GAAG,KACxBrB,UAAY,CAAEqB,EAAS,IAC9B,QAnBqB,8BAuB7B,GADAH,QAAQC,IAAIf,GACE,OAAXA,EACC,OAAQE,GAAoB,EAAK,mBAAmBF,EAAOzB,SAASyB,EAAOvB,SAASuB,EAAOJ,UAAU,KAzBxE,8BA4BrC,OAAOO,IA3CEe,CAAqBjC,GAC3Be,EAAOK,cACCL,GAIXc,QAAQC,IAAI1C,GACZyC,QAAQC,IAAI9B,GAGL,CACHoB,eAAe,KA+CvB,SAASF,IACL,OAAOD,GAAoB,GAE/B,SAASA,EAAoBG,EAAcc,EAAKzD,EAAIK,EAAIT,GACpD,OAAG+C,EACQ,CACHA,eAAe,EACfc,KAAMA,EACNzD,IAAKA,EACLK,IAAKA,EACLT,MAAOA,GAGJ,CACH+C,eAAe,GA6C3B,SAASe,EAAc/D,GACnB,OACI,gCACI,wBAAQH,UAAU,iBAAiBC,QAASE,EAAMF,QAAlD,kBACA,sBAAMD,UAAU,sBAAhB,SAAuCG,EAAMgE,iBAKzD,SAASC,EAAKjE,GACV,OACI,wBAAQH,UAAU,OAAOC,QAASE,EAAMF,QAAxC,kBAIR,SAASoE,EAAKlE,GACV,OACI,wBAAQH,UAAU,OAAOC,QAASE,EAAMF,QAAxC,kBAGR,SAASqE,EAAMnE,GACX,OACI,wBAAQH,UAAU,QAAQC,QAASE,EAAMF,QAAzC,mB,IAKFsE,E,4JACF,WAAS,IAAD,OACEC,EAASC,SAASvE,KAAKC,MAAMuE,YAAa,IAC5CC,EAAajD,MAAM,IAAIkD,KAAK,mBAMhC,OALIC,MAAML,IAAWA,GAAU,GAAKA,GAAU,GAC1CG,EAAW,IAAM,YAEjBA,EAAWH,IAAW,YAGtB,qBAAKxE,UAAU,sBAAf,SACK2E,EAAWvD,KAAI,SAACpB,EAAW8B,GACxB,IAAI1B,EAAiB,IAAR0B,EAAY,IAAMA,EAAMgD,WACrC,OACI,wBAAuC9E,UAAWA,EAAWC,QAAS,kBAAM,EAAKE,MAAMF,QAAQG,IAA/F,SAAwGA,GAA3F,mBAAmB0B,Y,GAd3BzB,IAAMC,WAsB7ByE,E,4JACF,WACI,IAAIC,EAAU9E,KAAKC,MAAM6E,QAAQ5D,KAAK,SAAA6D,GAAO,OACzC,8BAAMA,OAEV,OACI,qBAAKjF,UAAU,eAAf,SACKgF,Q,GAPS3E,IAAMC,WAc1B4E,E,kDACF,WAAY/E,GAAQ,IAAD,8BACf,cAAMA,IACDgF,MAAQ,CACTnE,QAASU,MAAM,GAAGkD,KAAK,MAAMxD,KAAI,SAAAgE,GAAC,OAAI1D,MAAM,GAAGkD,KAAK,SACpDF,YAAa,IACbP,YAAa,GACba,QAAS,IANE,E,4DASnB,SAAyBf,GACrB,OAAOA,GACH,IAAK,eAAgB,MAAO,qBAC5B,IAAK,mBAAoB,MAAO,2BAChC,QAAS,OAAOA,K,0CAGxB,SAA6B9C,GACzB,OAAOjB,KAAKmF,0BAA0BlE,EAAWX,IAAIW,EAAWN,IAAIM,EAAWf,MAAMF,KAAKoF,yBAAyBnE,EAAW8C,S,uCAElI,SAA0BzD,EAAIK,EAAIT,EAAMmF,GACpC,MAAO,WAAM/E,EAAI,GAAG,YAAOK,EAAI,GAAG,UAAKT,EAAM,IAAImF,EAAY,M,0BAEjE,WAA2B,IAAdN,EAAa,uDAAL,KACbD,EAAU,GACC,OAAZC,GACCD,EAAQvB,KAAKwB,GAEjB/E,KAAKsF,UAAS,SAAAL,GAAK,MAAK,CACpBH,QAASA,Q,wBAGjB,SAAWC,GACP,IAAID,EAAU9E,KAAKiF,MAAMH,QACzBA,EAAQvB,KAAKwB,GACb/E,KAAKsF,UAAS,SAAAL,GAAK,MAAK,CACpBH,QAASA,Q,yBAGjB,SAAYxE,EAAIK,GACZ,IAAIG,EAAUd,KAAKiF,MAAMnE,QAAQyE,QACjCzE,EAAQR,GAAKK,GAAOX,KAAKiF,MAAMT,YAC/BxE,KAAKsF,UAAS,SAAAL,GAAK,MAAK,CACpBnE,QAASA,MAEbd,KAAKwF,WAAWxF,KAAKmF,0BAA0B7E,EAAIK,EAAIX,KAAKiF,MAAMT,YAAY,+B,0BAElF,SAAatE,GACTF,KAAKsF,UAAS,SAAAL,GAAK,MAAK,CACpBT,YAAatE,Q,iCAGrB,WACI,IAAIe,EAAaD,EAAehB,KAAKiF,MAAMnE,SAC3C,GAAGG,EAAWgC,cAAc,CACxB,IAAInC,EAAUd,KAAKiF,MAAMnE,QACrBmD,EAAc,KAAKhD,EAAWX,IAAI,GAAG,YAAOW,EAAWN,IAAI,GAAG,sBAAOM,EAAWf,MAAM,qBAC1FY,EAAQG,EAAWX,KAAKW,EAAWN,KAAOM,EAAWf,MAAM0E,WAC3D5E,KAAKsF,UAAS,SAAAL,GAAK,MAAK,CACpBnE,QAASA,EACTmD,YAAaA,MAEjBjE,KAAKwF,WAAWxF,KAAKyF,6BAA6BxE,SAElDjB,KAAKsF,UAAS,SAAAL,GAAK,MAAK,CACpBhB,YAAa,mG,+BAIzB,WACIP,QAAQC,IAAI3D,KAAKiF,MAAMnE,SACvB4E,aAAaC,QAAQ,UAAW3F,KAAKiF,MAAMnE,W,+BAE/C,WACI,IAAM8E,EAAcF,aAAaG,QAAQ,WAAWC,MAAM,KACpDhF,EAAUU,MAAM,GAAGkD,KAAK,MAAMxD,KAAI,SAASS,EAAEC,GAAS,OAAOgE,EAAYL,MAAY,EAAN3D,EAAkB,GAATA,EAAM,OACpG5B,KAAKsF,UAAS,SAAAL,GAAK,MAAK,CACpBnE,QAASA,MAEbd,KAAK+F,aAAa,gD,gCAEtB,WACI/F,KAAKsF,UAAS,SAAAL,GAAK,MAAK,CACpBnE,QAASU,MAAM,GAAGkD,KAAK,MAAMxD,KAAI,SAAAgE,GAAC,OAAI1D,MAAM,GAAGkD,KAAK,aAExD1E,KAAK+F,iB,oBAET,WAAS,IAAD,OACJ,OACI,sBAAKjG,UAAU,OAAf,UACI,cAACO,EAAD,CACIS,QAASd,KAAKiF,MAAMnE,QACpBf,QAAS,SAACO,EAAIK,GAAL,OAAa,EAAKqF,YAAY1F,EAAIK,MAE/C,cAAC0D,EAAD,CAAgBG,YAAaxE,KAAKiF,MAAMT,YAAazE,QAAS,SAACG,GAAD,OAAW,EAAK+F,aAAa/F,MAC3F,cAAC8D,EAAD,CAAeC,YAAajE,KAAKiF,MAAMhB,YAAalE,QAAS,kBAAM,EAAKmG,yBACxE,sBAAKpG,UAAU,aAAf,UACI,cAACoE,EAAD,CAAMnE,QAAS,kBAAM,EAAKoG,uBAC1B,cAAChC,EAAD,CAAMpE,QAAS,kBAAM,EAAKqG,uBAC1B,cAAChC,EAAD,CAAOrE,QAAS,kBAAM,EAAKsG,2BAE/B,cAACxB,EAAD,CAAaC,QAAS9E,KAAKiF,MAAMH,iB,GArG9B3E,IAAMC,WA2GzBkG,IAASC,OACL,cAACvB,EAAD,IACAwB,SAASC,eAAe,W","file":"static/js/main.7d0ef2d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nclass Square extends React.Component {\r\n    render(){\r\n        return (\r\n            <button className=\"square\" onClick={this.props.onClick}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderBoardRow(row,startCol){\r\n        const blockSize = 3\r\n        return (\r\n            <div className=\"board-row\">\r\n                {this.renderBlock(row,startCol)}\r\n                {this.renderBlock(row,startCol+blockSize*1)}\r\n                {this.renderBlock(row,startCol+blockSize*2)}\r\n            </div>\r\n        ); \r\n    }\r\n    renderBlock(startRow,col){\r\n        return (\r\n            <div className=\"board-block\">\r\n                {this.renderBlockRow(startRow,col)}\r\n                {this.renderBlockRow(startRow+1,col)}\r\n                {this.renderBlockRow(startRow+2,col)}\r\n            </div>\r\n        ); \r\n    }\r\n    renderBlockRow(row,startCol){\r\n        return (\r\n            <div className=\"block-row\">\r\n                {this.renderSquare(row,startCol)}\r\n                {this.renderSquare(row,startCol+1)}\r\n                {this.renderSquare(row,startCol+2)}\r\n            </div>\r\n        ); \r\n    }\r\n    renderSquare(row,col) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[row][col]}\r\n                onClick={() => this.props.onClick(row,col)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-top\">\r\n                    {this.renderBoardRow(0,0)}\r\n                    {this.renderBoardRow(3,0)}\r\n                    {this.renderBoardRow(6,0)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction calcCandidates(squares){\r\n    let prediction = squares.map(function(row, rowIndex){\r\n        return row.map(function(cell, colIndex) {\r\n            let value = (\"1\"<=cell&&cell<=\"9\")? Number(cell) : null;\r\n            let candidates = (\"1\"<=cell&&cell<=\"9\")? [] : Array.from({length: 9}, (_, index) => index+1);\r\n            return { \r\n                value: value,\r\n                candidates: candidates,\r\n                rowIndex: rowIndex,\r\n                colIndex: colIndex\r\n            }\r\n        })\r\n    })\r\n    let conditions = createConditions(prediction)\r\n\r\n\r\n    updateCandidatesForPlaceValue(conditions)\r\n    let result = checkPrediction(prediction, \"UNIQUE_PLACE\")\r\n    if(result.hasPrediction){\r\n        return result\r\n    }\r\n\r\n    result = checkUniqueCandidate(conditions)\r\n    if(result.hasPrediction){\r\n        return result\r\n    }\r\n    \r\n\r\n    console.log(prediction)\r\n    console.log(conditions)\r\n\r\n\r\n    return {\r\n        hasPrediction: false\r\n    }\r\n}\r\n\r\nfunction checkUniqueCandidate(conditions){\r\n    for(let condition of conditions) {\r\n        const countGroupByPlace = condition.reduce(function (countGroupByPlace, place, index) {\r\n            place.candidates.forEach(candidate =>{\r\n                let countByPlace = countGroupByPlace.get(candidate)\r\n                if(countByPlace !== undefined){\r\n                    countByPlace.push(index)\r\n                    countGroupByPlace.set(candidate, countByPlace)\r\n                }else{\r\n                    countGroupByPlace.set(candidate, [ index ])\r\n                }\r\n            });\r\n            return countGroupByPlace\r\n        }, new Map());  \r\n        console.log(countGroupByPlace)\r\n        let result = null\r\n        for(let pairList of countGroupByPlace.entries()){\r\n            if(pairList[1].length === 1){\r\n                result = condition[pairList[1][0]]\r\n                result.candidate = [ pairList[0] ]\r\n                break;\r\n            }\r\n        }\r\n        console.log(result)\r\n        if(result !== null){\r\n            return  createPredictionObj(true,\"UNIQUE_CANDIDATE\",result.rowIndex,result.colIndex,result.candidate[0])\r\n        }    \r\n    }\r\n    return createNoPredictionObj()\r\n}\r\n\r\nfunction checkPrediction(prediction, checkedConditionType){\r\n    for(let i = 0; i < 9; i++){\r\n        for(let j = 0; j < 9; j++){\r\n            let candidates = prediction[i][j].candidates\r\n            if(prediction[i][j].candidates.length === 1){\r\n                return createPredictionObj(true,checkedConditionType,i,j,candidates[0])\r\n            }\r\n        }\r\n    }\r\n    return createNoPredictionObj()\r\n}\r\n\r\nfunction createNoPredictionObj(){\r\n    return createPredictionObj(false)\r\n}\r\nfunction createPredictionObj(hasPrediction,type,row,col,value){\r\n    if(hasPrediction){\r\n        return {\r\n            hasPrediction: true,\r\n            type: type,\r\n            row: row,\r\n            col: col,\r\n            value: value\r\n        }\r\n    }else{\r\n        return {\r\n            hasPrediction: false\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateCandidatesForPlaceValue(conditions){     \r\n    conditions.forEach(condition => {\r\n        let definiteValues = condition.filter(place => place.value !== null).map(place => place.value)\r\n        condition.forEach(place => {\r\n            place.candidates = place.candidates.filter((candidate) => !definiteValues.some((defValue) => candidate === defValue))\r\n        })\r\n    });\r\n}\r\n\r\nfunction createConditions(prediction){\r\n    let conditions = Array(27)\r\n    let idx = 0\r\n    //row conditions\r\n    prediction.forEach(element => {\r\n        conditions[idx++] = element\r\n    });\r\n    //column conditions\r\n    for(let i = 0; i < 9; i++){\r\n        conditions[idx++] = prediction.map(row => row[i])\r\n    }\r\n    // block conditions\r\n    for(let i = 0; i < 9; i=i+3){\r\n        for(let j = 0; j < 9; j=j+3){\r\n            conditions[idx++] = [\r\n                prediction[i][j],\r\n                prediction[i][j+1],\r\n                prediction[i][j+2],\r\n                prediction[i+1][j],\r\n                prediction[i+1][j+1],\r\n                prediction[i+1][j+2],\r\n                prediction[i+2][j],\r\n                prediction[i+2][j+1],\r\n                prediction[i+2][j+2],\r\n            ]\r\n        }\r\n    }\r\n    return conditions\r\n}\r\n\r\n\r\nfunction NextCandidate(props){\r\n    return (\r\n        <div>\r\n            <button className=\"next-candidate\" onClick={props.onClick}>next</button>\r\n            <span className=\"next-candidate-text\">{props.predictText}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Save(props){\r\n    return (\r\n        <button className=\"save\" onClick={props.onClick}>save</button>\r\n    )\r\n}\r\n\r\nfunction Load(props){\r\n    return (\r\n        <button className=\"load\" onClick={props.onClick}>load</button>\r\n    )\r\n}\r\nfunction Clear(props){\r\n    return (\r\n        <button className=\"clear\" onClick={props.onClick}>clear</button>\r\n    )\r\n}\r\n\r\n\r\nclass NumberSelector extends React.Component {\r\n    render(){\r\n        const parsed = parseInt(this.props.selectValue, 10);\r\n        let classNames = Array(10).fill(\"number-selector\");\r\n        if (isNaN(parsed) || parsed <= 0 || parsed >= 10) {\r\n            classNames[0] += \" selected\"\r\n        }else{\r\n            classNames[parsed] += \" selected\"\r\n        }\r\n        return (\r\n            <div className=\"number-selector-row\">\r\n                {classNames.map((className, index)=> {\r\n                    let value = (index===0)? \" \" : index.toString()\r\n                    return (\r\n                        <button key={\"number-selector-\"+index} className={className} onClick={() => this.props.onClick(value)}>{value}</button>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass HistoryView extends React.Component {\r\n    render(){\r\n        let history = this.props.history.map( message => (\r\n            <div>{message}</div>\r\n        ))\r\n        return (\r\n            <div className=\"history-view\">\r\n                {history}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null).map(x => Array(9).fill(null)),\r\n            selectValue: \" \",\r\n            predictText: \"\",\r\n            history: []\r\n        };\r\n    }\r\n    getPredictionTypeMessage(type){\r\n        switch(type){\r\n            case \"UNIQUE_PLACE\": return \"値確定\";\r\n            case \"UNIQUE_CANDIDATE\": return \"条件確定\";\r\n            default: return type;\r\n        }\r\n    }\r\n    getSetValueHistoryPrediction(prediction){\r\n        return this.getSetValueHistoryMessage(prediction.row,prediction.col,prediction.value,this.getPredictionTypeMessage(prediction.type))\r\n    }\r\n    getSetValueHistoryMessage(row,col,value,typeMessage){\r\n        return \"[↓\"+(row+1)+\"][→\"+(col+1)+\"]＝\"+value+\"(\"+typeMessage+\")\";\r\n    }\r\n    clearHistory(message=null){\r\n        let history = [];\r\n        if(message !== null){\r\n            history.push(message)\r\n        }\r\n        this.setState(state => ({\r\n            history: history\r\n        }));\r\n    }\r\n    addHistory(message){\r\n        let history = this.state.history;\r\n        history.push(message)\r\n        this.setState(state => ({\r\n            history: history\r\n        }));\r\n    }\r\n    handleClick(row,col) {\r\n        let squares = this.state.squares.slice();\r\n        squares[row][col] = this.state.selectValue;\r\n        this.setState(state => ({\r\n            squares: squares\r\n        }));\r\n        this.addHistory(this.getSetValueHistoryMessage(row,col,this.state.selectValue,\"ユーザー\"))\r\n    }\r\n    handleSelect(value) {\r\n        this.setState(state => ({\r\n            selectValue: value\r\n        }));\r\n    }\r\n    handleNextCandidate(){\r\n        let prediction = calcCandidates(this.state.squares)\r\n        if(prediction.hasPrediction){\r\n            let squares = this.state.squares;\r\n            let predictText = \"[\"+(prediction.row+1)+\"]行[\"+(prediction.col+1)+\"]列目は\"+prediction.value+\"です。\"\r\n            squares[prediction.row][prediction.col] = prediction.value.toString()\r\n            this.setState(state => ({\r\n                squares: squares,\r\n                predictText: predictText\r\n            }));\r\n            this.addHistory(this.getSetValueHistoryPrediction(prediction))\r\n        }else{\r\n            this.setState(state => ({\r\n                predictText: \"次の候補は見つかりませんでした\"\r\n            }));\r\n        }\r\n    }\r\n    handleSaveSquares(){\r\n        console.log(this.state.squares)\r\n        localStorage.setItem('squares', this.state.squares)\r\n    }\r\n    handleLoadSquares(){\r\n        const savedValues = localStorage.getItem('squares').split(\",\")\r\n        const squares = Array(9).fill(null).map(function(_,index) { return savedValues.slice(index*9,(index+1)*9)})\r\n        this.setState(state => ({\r\n            squares: squares\r\n        }));\r\n        this.clearHistory(\"ロードしました\")\r\n    }\r\n    handleClearSquares(){\r\n        this.setState(state => ({\r\n            squares: Array(9).fill(null).map(x => Array(9).fill(null))\r\n        }));\r\n        this.clearHistory()\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"game\">\r\n                <Board \r\n                    squares={this.state.squares}\r\n                    onClick={(row,col) => this.handleClick(row,col)}\r\n                />\r\n                <NumberSelector selectValue={this.state.selectValue} onClick={(value) => this.handleSelect(value)}/>\r\n                <NextCandidate predictText={this.state.predictText} onClick={() => this.handleNextCandidate()}></NextCandidate>\r\n                <div className=\"button-row\">\r\n                    <Save onClick={() => this.handleSaveSquares()}></Save>\r\n                    <Load onClick={() => this.handleLoadSquares()}></Load>\r\n                    <Clear onClick={() => this.handleClearSquares()}></Clear>\r\n                </div>\r\n                <HistoryView history={this.state.history}></HistoryView>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}