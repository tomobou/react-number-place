{"version":3,"sources":["index.tsx"],"names":["Square","className","onClick","this","props","value","React","Component","Board","row","startCol","renderBlock","blockSize","startRow","col","renderBlockRow","renderSquare","squares","renderBoardRow","calcPlaces","map","rowIndex","cell","colIndex","Number","candidates","Array","from","length","_","index","calcPrediction","places","conditions","createConditions","updateCandidatesForPlaceValue","result","checkPrediction","updateCandidatesForOverlapConditions","condition","countGroupByPlace","Map","forEach","place","candidate","get","set","entries","pairList","key","createPredictionObj","checkUniqueCandidate","console","log","slice","blockCondition","otherCondition","overlap","filter","includes","overlapCandidates","Set","overlapValue","overlapBlockLength","overlapOtherLength","values","prediction","checkedConditionType","i","j","type","definiteValues","some","defValue","idx","NextPrediction","predictText","Save","Load","Clear","NumberSelector","parsed","parseInt","selectValue","classNames","fill","isNaN","toString","HistoryView","history","message","Game","state","x","candidatesList","getSetValueHistoryMessage","getPredictionTypeMessage","typeMessage","push","setState","addHistory","getSetValueHistoryPrediction","localStorage","setItem","join","savedValues","getItem","split","clearHistory","handleClick","handleSelect","handleNextPrediction","handleSaveSquares","handleLoadSquares","handleClearSquares","updateCandidatesList","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0c8141ca.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\ninterface SquareProps {\r\n    onClick: () => void,\r\n    value: string\r\n}\r\n\r\nclass Square extends React.Component<SquareProps> {\r\n    render() {\r\n        return (\r\n            <button className=\"square\" onClick={this.props.onClick}>\r\n                {this.props.value}\r\n            </button>\r\n        );\r\n    }\r\n}\r\n\r\ninterface BoardProps {\r\n    onClick: (row: number, col: number) => void,\r\n    squares: string[][]\r\n}\r\n\r\nclass Board extends React.Component<BoardProps> {\r\n    renderBoardRow(row: number, startCol: number) {\r\n        const blockSize = 3\r\n        return (\r\n            <div className=\"board-row\">\r\n                {this.renderBlock(row, startCol)}\r\n                {this.renderBlock(row, startCol + blockSize * 1)}\r\n                {this.renderBlock(row, startCol + blockSize * 2)}\r\n            </div>\r\n        );\r\n    }\r\n    renderBlock(startRow: number, col: number) {\r\n        return (\r\n            <div className=\"board-block\">\r\n                {this.renderBlockRow(startRow, col)}\r\n                {this.renderBlockRow(startRow + 1, col)}\r\n                {this.renderBlockRow(startRow + 2, col)}\r\n            </div>\r\n        );\r\n    }\r\n    renderBlockRow(row: number, startCol: number) {\r\n        return (\r\n            <div className=\"block-row\">\r\n                {this.renderSquare(row, startCol)}\r\n                {this.renderSquare(row, startCol + 1)}\r\n                {this.renderSquare(row, startCol + 2)}\r\n            </div>\r\n        );\r\n    }\r\n    renderSquare(row: number, col: number) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[row][col]}\r\n                onClick={() => this.props.onClick(row, col)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-top\">\r\n                    {this.renderBoardRow(0, 0)}\r\n                    {this.renderBoardRow(3, 0)}\r\n                    {this.renderBoardRow(6, 0)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\ninterface Place {\r\n    value: number | null,\r\n    candidates: number[],\r\n    rowIndex: number,\r\n    colIndex: number\r\n}\r\n\r\nfunction calcPlaces(squares: string[][]){\r\n    return squares.map(function (row, rowIndex) {\r\n        return row.map(function (cell, colIndex): Place {\r\n            let value = (\"1\" <= cell && cell <= \"9\") ? Number(cell) : null;\r\n            let candidates = (\"1\" <= cell && cell <= \"9\") ? [] : Array.from({ length: 9 }, (_, index) => index + 1);\r\n            return {\r\n                value: value,\r\n                candidates: candidates,\r\n                rowIndex: rowIndex,\r\n                colIndex: colIndex\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nfunction calcPrediction(squares: string[][]) {\r\n    let places = calcPlaces(squares)\r\n    let conditions = createConditions(places)\r\n\r\n    updateCandidatesForPlaceValue(conditions)\r\n    let result = checkPrediction(places, \"UNIQUE_PLACE\")\r\n    if (result != null) {\r\n        return result\r\n    }\r\n    updateCandidatesForOverlapConditions(conditions)\r\n    result = checkPrediction(places, \"OVERLAP_CONDITIONS\")\r\n    if (result != null) {\r\n        return result\r\n    }\r\n\r\n    result = checkUniqueCandidate(conditions)\r\n    if (result != null) {\r\n        return result\r\n    }\r\n\r\n    console.log(places)\r\n    console.log(conditions)\r\n\r\n    return null\r\n}\r\n\r\n/**\r\n * 2つの制約条件の重複マスにおいて、\r\n * 一方の制約条件の重複マスにのみ存在する候補値xがある場合に、\r\n * 他方の制約条件の重複マス以外の候補値xを削除する\r\n * （重複マスはblock condition と row or col の組み合わせでしか発生しない）\r\n * @param conditions \r\n */\r\nfunction updateCandidatesForOverlapConditions(conditions: Place[][]):Place[][]{\r\n    for(let blockCondition of conditions.slice(18)){\r\n        for(let otherCondition of conditions.slice(0,18)){\r\n            let overlap = blockCondition.filter( place => otherCondition.includes(place))\r\n            if(overlap.length > 0){\r\n                let overlapCandidates = new Set(...overlap.map(place => place.candidates))\r\n                for(let overlapValue of [...overlapCandidates.values()]){\r\n                    let overlapBlockLength = blockCondition.filter(place => !overlap.includes(place) && place.candidates.includes(overlapValue)).length\r\n                    let overlapOtherLength = otherCondition.filter(place => !overlap.includes(place) && place.candidates.includes(overlapValue)).length\r\n                    if(overlapBlockLength > 0 && overlapOtherLength === 0){\r\n                        blockCondition.filter(place => !overlap.includes(place)).forEach(place => place.candidates = place.candidates.filter(candidate => candidate !== overlapValue))\r\n                    }else if(overlapBlockLength === 0 && overlapOtherLength > 0){\r\n                        otherCondition.filter(place => !overlap.includes(place)).forEach(place => place.candidates = place.candidates.filter(candidate => candidate !== overlapValue))\r\n                    }                     \r\n                }\r\n            }\r\n        }\r\n    }\r\n    return conditions\r\n}\r\n/**\r\n * 制約条件内の候補値を確認し、1箇所のみ候補に挙がっている値がある場合、該当箇所の候補として予測を返す。\r\n * @param {*} conditions \r\n * @returns \r\n */\r\nfunction checkUniqueCandidate(conditions: Place[][]): Prediction| null {\r\n    for (let condition of conditions) {\r\n        let countGroupByPlace = new Map<number, number>()\r\n        condition.forEach(function (place, index) {\r\n            place.candidates.forEach(candidate => {\r\n                let countByPlace = countGroupByPlace.get(candidate)\r\n                if (countByPlace != null) {\r\n                    countGroupByPlace.set(candidate, -1)\r\n                } else {\r\n                    countGroupByPlace.set(candidate, index)\r\n                }\r\n            });\r\n            return countGroupByPlace\r\n        });\r\n        for (let pairList of [...countGroupByPlace.entries()]) {\r\n            const key = pairList[0]\r\n            const value = pairList[1]\r\n            if (value != null) {\r\n                if (value !== -1) {\r\n                    let result = condition[value];\r\n                    result.candidates = [key];\r\n                    return createPredictionObj(\"UNIQUE_CANDIDATE\", result.rowIndex, result.colIndex, result.candidates[0])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nfunction checkPrediction(prediction: Place[][], checkedConditionType: string): Prediction | null {\r\n    for (let i = 0; i < 9; i++) {\r\n        for (let j = 0; j < 9; j++) {\r\n            let candidates = prediction[i][j].candidates\r\n            if (prediction[i][j].candidates.length === 1) {\r\n                return createPredictionObj(checkedConditionType, i, j, candidates[0])\r\n            }\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\ninterface Prediction {\r\n    type: string,\r\n    row: number,\r\n    col: number,\r\n    value: number\r\n};\r\n\r\n/**\r\n * 予測のオブジェクトを作成する\r\n * @param {*} type \r\n * @param {*} row \r\n * @param {*} col \r\n * @param {*} value \r\n * @returns \r\n */\r\nfunction createPredictionObj(type: string, row: number, col: number, value: number): Prediction {\r\n    return {\r\n        type: type,\r\n        row: row,\r\n        col: col,\r\n        value: value\r\n    }\r\n}\r\n\r\n/**\r\n * 既に入っている値と制約条件の組み合わせをもとに各場所(place)に入れられる候補値(candidates)を導出する。\r\n * @param {*} conditions 制約条件\r\n */\r\nfunction updateCandidatesForPlaceValue(conditions: Place[][]) :Place[][]{\r\n    conditions.forEach(condition => {\r\n        let definiteValues = condition.filter(place => place.value !== null).map(place => place.value)\r\n        condition.forEach(place => {\r\n            place.candidates = place.candidates.filter((candidate) => !definiteValues.some((defValue) => candidate === defValue))\r\n        })\r\n    });\r\n    return conditions\r\n}\r\n\r\nfunction createConditions(places: Place[][]): Place[][] {\r\n    let conditions = Array<Place[]>(27)\r\n    let idx = 0\r\n    //row conditions\r\n    places.forEach(place => {\r\n        conditions[idx++] = place\r\n    });\r\n    //column conditions\r\n    for (let i = 0; i < 9; i++) {\r\n        conditions[idx++] = places.map(row => row[i])\r\n    }\r\n    // block conditions\r\n    for (let i = 0; i < 9; i = i + 3) {\r\n        for (let j = 0; j < 9; j = j + 3) {\r\n            conditions[idx++] = [\r\n                places[i][j],\r\n                places[i][j + 1],\r\n                places[i][j + 2],\r\n                places[i + 1][j],\r\n                places[i + 1][j + 1],\r\n                places[i + 1][j + 2],\r\n                places[i + 2][j],\r\n                places[i + 2][j + 1],\r\n                places[i + 2][j + 2],\r\n            ]\r\n        }\r\n    }\r\n    return conditions\r\n}\r\n\r\ninterface NextPredictionProps {\r\n    onClick: () => void,\r\n    predictText: string\r\n}\r\n\r\nfunction NextPrediction(props: NextPredictionProps) {\r\n    return (\r\n        <div>\r\n            <button className=\"next-prediction\" onClick={props.onClick}>next</button>\r\n            <span className=\"next-prediction-text\">{props.predictText}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface ClickActionProps {\r\n    onClick: () => void\r\n}\r\n\r\nfunction Save(props: ClickActionProps) {\r\n    return (\r\n        <button className=\"save\" onClick={props.onClick}>save</button>\r\n    )\r\n}\r\n\r\nfunction Load(props: ClickActionProps) {\r\n    return (\r\n        <button className=\"load\" onClick={props.onClick}>load</button>\r\n    )\r\n}\r\nfunction Clear(props: ClickActionProps) {\r\n    return (\r\n        <button className=\"clear\" onClick={props.onClick}>clear</button>\r\n    )\r\n}\r\n\r\ninterface NumberSelectorProps {\r\n    selectValue: string,\r\n    onClick: (value: string) => void\r\n}\r\n\r\nclass NumberSelector extends React.Component<NumberSelectorProps> {\r\n    render() {\r\n        const parsed = parseInt(this.props.selectValue, 10);\r\n        let classNames = Array(10).fill(\"number-selector\");\r\n        if (isNaN(parsed) || parsed <= 0 || parsed >= 10) {\r\n            classNames[0] += \" selected\"\r\n        } else {\r\n            classNames[parsed] += \" selected\"\r\n        }\r\n        return (\r\n            <div className=\"number-selector-row\">\r\n                {classNames.map((className, index) => {\r\n                    let value = (index === 0) ? \" \" : index.toString()\r\n                    return (\r\n                        <button key={\"number-selector-\" + index} className={className} onClick={() => this.props.onClick(value)}>{value}</button>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface HistoryViewProps {\r\n    history: string[]\r\n}\r\n\r\nclass HistoryView extends React.Component<HistoryViewProps> {\r\n    render() {\r\n        let history = this.props.history.map(message => (\r\n            <div>{message}</div>\r\n        ))\r\n        return (\r\n            <div className=\"history-view\">\r\n                {history}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\ninterface GameProps {\r\n\r\n}\r\ninterface GameStates {\r\n    squares: string[][],\r\n    selectValue: string,\r\n    predictText: string,\r\n    history: string[],\r\n    candidatesList: string[][]\r\n}\r\n\r\n\r\nclass Game extends React.Component<GameProps, GameStates> {\r\n    constructor(props: GameProps | Readonly<GameProps>) {\r\n        super(props);\r\n        this.state = {\r\n            squares: Array(9).fill(null).map(x => Array(9).fill(null)),\r\n            selectValue: \" \",\r\n            predictText: \"\",\r\n            history: [],\r\n            candidatesList: Array(9).fill(null).map(x => Array(9).fill(null))\r\n        };\r\n    }\r\n    getPredictionTypeMessage(type: string) {\r\n        switch (type) {\r\n            case \"UNIQUE_PLACE\": return \"値確定\";\r\n            case \"OVERLAP_CONDITIONS\": return \"重複排除値確定\";\r\n            case \"UNIQUE_CANDIDATE\": return \"条件確定\";\r\n            default: return type;\r\n        }\r\n    }\r\n    getSetValueHistoryPrediction(prediction: Prediction) {\r\n        return this.getSetValueHistoryMessage(prediction.row, prediction.col, prediction.value.toString(), this.getPredictionTypeMessage(prediction.type))\r\n    }\r\n    getSetValueHistoryMessage(row: number, col: number, value: string, typeMessage: string) {\r\n        return \"[↓\" + (row + 1) + \"][→\" + (col + 1) + \"]＝\" + value + \"(\" + typeMessage + \")\";\r\n    }\r\n    clearHistory(message: string = \"\") {\r\n        let history: string[] = [];\r\n        if (message !== \"\") {\r\n            history.push(message)\r\n        }\r\n        this.setState(state => ({\r\n            history: history\r\n        }));\r\n    }\r\n    addHistory(message: string) {\r\n        let history = this.state.history;\r\n        history.push(message)\r\n        this.setState(state => ({\r\n            history: history\r\n        }));\r\n    }\r\n    handleClick(row: number, col: number) {\r\n        let squares = this.state.squares.slice();\r\n        squares[row][col] = this.state.selectValue;\r\n        this.setState(state => ({\r\n            squares: squares\r\n        }));\r\n        this.addHistory(this.getSetValueHistoryMessage(row, col, this.state.selectValue, \"ユーザー\"))\r\n    }\r\n    handleSelect(value: string) {\r\n        this.setState(state => ({\r\n            selectValue: value\r\n        }));\r\n    }\r\n    handleNextPrediction() {\r\n        let prediction = calcPrediction(this.state.squares)\r\n        if (prediction != null) {\r\n            let squares = this.state.squares;\r\n            let predictText = \"[\" + (prediction.row + 1) + \"]行[\" + (prediction.col + 1) + \"]列目は\" + prediction.value + \"です。\"\r\n            squares[prediction.row][prediction.col] = prediction.value.toString()\r\n            this.setState(state => ({\r\n                squares: squares,\r\n                predictText: predictText\r\n            }));\r\n            this.addHistory(this.getSetValueHistoryPrediction(prediction))\r\n        } else {\r\n            this.setState(state => ({\r\n                predictText: \"次の候補は見つかりませんでした\"\r\n            }));\r\n        }\r\n    }\r\n    handleSaveSquares() {\r\n        console.log(this.state.squares)\r\n        localStorage.setItem('squares', this.state.squares.map(row => row.join(\",\")).join(\",\"))\r\n    }\r\n    handleLoadSquares() {\r\n        const savedValues = localStorage.getItem('squares')?.split(\",\")\r\n        if (savedValues != null) {\r\n            const squares = Array(9).fill(null).map(function (_, index) { return savedValues.slice(index * 9, (index + 1) * 9) })\r\n            this.setState(state => ({\r\n                squares: squares\r\n            }));\r\n            this.clearHistory(\"ロードしました\")\r\n        }\r\n    }\r\n    handleClearSquares() {\r\n        this.setState(state => ({\r\n            squares: Array(9).fill(null).map(x => Array(9).fill(null))\r\n        }));\r\n        this.clearHistory()\r\n    }\r\n    updateCandidatesList(row:number){\r\n        let candidatesList:string[][]\r\n        if(row > 5){\r\n            candidatesList = updateCandidatesForPlaceValue(createConditions(calcPlaces(this.state.squares))).map(function(places) {\r\n                return places.map(function(place){\r\n                    return (place.value != null )? place.value.toString():place.candidates.join(\"\") \r\n                })\r\n            });\r\n        }else{\r\n            candidatesList = updateCandidatesForOverlapConditions(updateCandidatesForPlaceValue(createConditions(calcPlaces(this.state.squares)))).map(function(places) {\r\n                return places.map(function(place){\r\n                    return (place.value != null )? place.value.toString():place.candidates.join(\"\") \r\n                })\r\n            });\r\n        }\r\n\r\n        console.log(candidatesList)\r\n        this.setState(state => ({\r\n            candidatesList: candidatesList\r\n        }));\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"game\">\r\n                <Board\r\n                    squares={this.state.squares}\r\n                    onClick={(row, col) => this.handleClick(row, col)}\r\n                />\r\n                <NumberSelector selectValue={this.state.selectValue} onClick={(value) => this.handleSelect(value)} />\r\n                <NextPrediction predictText={this.state.predictText} onClick={() => this.handleNextPrediction()}></NextPrediction>\r\n                <div className=\"button-row\">\r\n                    <Save onClick={() => this.handleSaveSquares()}></Save>\r\n                    <Load onClick={() => this.handleLoadSquares()}></Load>\r\n                    <Clear onClick={() => this.handleClearSquares()}></Clear>\r\n                </div>\r\n                <HistoryView history={this.state.history}></HistoryView>\r\n                <div className=\"candidates\">\r\n                    候補ビュー（5列目より上をクリックで重複排除値推定結果）\r\n                    <Board\r\n                        squares={this.state.candidatesList}\r\n                        onClick={(row, col) => this.updateCandidatesList(row)}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n"],"sourceRoot":""}